{
  "version": 3,
  "sources": ["../src/extension.ts"],
  "sourcesContent": ["import * as vscode from 'vscode';\n\nexport function activate(context: vscode.ExtensionContext) {\n    let disposable = vscode.commands.registerCommand('tategaki.openVerticalEditor', () => {\n        const editor = vscode.window.activeTextEditor;\n\n        if (!editor || editor.document.languageId !== 'plaintext') {\n            vscode.window.showErrorMessage('This extension only works with .txt files');\n            return;\n        }\n\n        const document = editor.document;\n        let currentContent = document.getText();\n\n        const panel = vscode.window.createWebviewPanel(\n            'verticalEditor',\n            `\u7E26\u66F8\u304D: ${document.fileName}`,\n            vscode.ViewColumn.Beside,\n            { \n                enableScripts: true,\n                retainContextWhenHidden: true\n            }\n        );\n\n        function updateWebview() {\n            panel.webview.html = getWebviewContent(currentContent);\n        }\n\n        updateWebview();\n\n        panel.onDidDispose(() => {\n            saveContent();\n        }, null, context.subscriptions);\n\n        async function saveContent() {\n            try {\n                const edit = new vscode.WorkspaceEdit();\n                edit.replace(document.uri, new vscode.Range(0, 0, document.lineCount, 0), currentContent);\n                const success = await vscode.workspace.applyEdit(edit);\n                if (success) {\n                    await document.save();\n                    vscode.window.showInformationMessage('Document saved successfully.');\n                } else {\n                    vscode.window.showErrorMessage('Failed to apply edit.');\n                }\n            } catch (error) {\n                vscode.window.showErrorMessage(`Failed to save document: ${(error as Error).message}`);\n            }\n        }\n\n        panel.webview.onDidReceiveMessage(message => {\n            switch (message.command) {\n                case 'save':\n                    currentContent = convertHtmlToText(message.text);\n                    saveContent();\n                    break;\n                case 'update':\n                    currentContent = convertHtmlToText(message.text);\n                    break;\n            }\n        }, undefined, context.subscriptions);\n    });\n\n    context.subscriptions.push(disposable);\n}\n\nfunction getWebviewContent(text: string): string {\n    const lines = text.split('\\n').map(line => {\n        return `<div class=\"line\">${line}</div>`;\n    }).join('');\n    return `\n    <!DOCTYPE html>\n    <html lang=\"ja\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>\u7E26\u66F8\u304D\u30A8\u30C7\u30A3\u30BF</title>\n        <style>\n            body { \n                font-family: \"MS Mincho\", \"\uFF2D\uFF33 \u660E\u671D\", serif;\n                margin: 0;\n                padding: 0;\n                height: 100vh;\n                overflow: hidden;\n            }\n            #editor { \n                white-space: pre-wrap; \n                writing-mode: vertical-rl;\n                text-orientation: upright;\n                height: 100vh;\n                width: 100%;\n                overflow-x: auto;\n                padding: 10px;\n                box-sizing: border-box;\n                font-size: 16px;\n            }\n            .line {\n                border-right: 1px dotted rgba(170, 170, 170, 0.3);\n                padding-right: 5px;\n                padding-left: 5px;\n                min-width: 1em;\n                height: 100%;\n            }\n        </style>\n    </head>\n    <body>\n        <div id=\"editor\" contenteditable=\"true\" spellcheck=\"false\">${lines}</div>\n        <script>\n            const vscode = acquireVsCodeApi();\n            const editor = document.getElementById('editor');\n            let lastContent = editor.innerHTML;\n\n            function updateContent() {\n                const content = editor.innerHTML;\n                if (content !== lastContent) {\n                    lastContent = content;\n                    vscode.postMessage({\n                        command: 'update',\n                        text: content\n                    });\n                }\n            }\n\n            editor.addEventListener('input', updateContent);\n            editor.addEventListener('keyup', updateContent);\n\n            document.addEventListener('keydown', (e) => {\n                if ((e.ctrlKey || e.metaKey) && e.key.toLowerCase() === 's') {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    vscode.postMessage({ command: 'save', text: editor.innerHTML });\n                }\n            });\n\n            editor.focus();\n        </script>\n    </body>\n    </html>\n    `;\n}\n\nfunction convertHtmlToText(html: string): string {\n    return html\n        .replace(/<div class=\"line\">(.*?)<\\/div>/g, '$1\\n')\n        .replace(/<br\\s*\\/?>/g, '')  // Remove <br> tags entirely\n        .replace(/&nbsp;/g, ' ')\n        .replace(/&amp;/g, '&')\n        .replace(/&lt;/g, '<')\n        .replace(/&gt;/g, '>')\n        .replace(/\\n$/, ''); // Remove trailing newline\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAwB;AAEjB,SAAS,SAAS,SAAkC;AACvD,MAAI,aAAoB,gBAAS,gBAAgB,+BAA+B,MAAM;AAClF,UAAM,SAAgB,cAAO;AAE7B,QAAI,CAAC,UAAU,OAAO,SAAS,eAAe,aAAa;AACvD,MAAO,cAAO,iBAAiB,2CAA2C;AAC1E;AAAA,IACJ;AAEA,UAAM,WAAW,OAAO;AACxB,QAAI,iBAAiB,SAAS,QAAQ;AAEtC,UAAM,QAAe,cAAO;AAAA,MACxB;AAAA,MACA,uBAAQ,SAAS,QAAQ;AAAA,MAClB,kBAAW;AAAA,MAClB;AAAA,QACI,eAAe;AAAA,QACf,yBAAyB;AAAA,MAC7B;AAAA,IACJ;AAEA,aAAS,gBAAgB;AACrB,YAAM,QAAQ,OAAO,kBAAkB,cAAc;AAAA,IACzD;AAEA,kBAAc;AAEd,UAAM,aAAa,MAAM;AACrB,kBAAY;AAAA,IAChB,GAAG,MAAM,QAAQ,aAAa;AAE9B,mBAAe,cAAc;AACzB,UAAI;AACA,cAAM,OAAO,IAAW,qBAAc;AACtC,aAAK,QAAQ,SAAS,KAAK,IAAW,aAAM,GAAG,GAAG,SAAS,WAAW,CAAC,GAAG,cAAc;AACxF,cAAM,UAAU,MAAa,iBAAU,UAAU,IAAI;AACrD,YAAI,SAAS;AACT,gBAAM,SAAS,KAAK;AACpB,UAAO,cAAO,uBAAuB,8BAA8B;AAAA,QACvE,OAAO;AACH,UAAO,cAAO,iBAAiB,uBAAuB;AAAA,QAC1D;AAAA,MACJ,SAAS,OAAO;AACZ,QAAO,cAAO,iBAAiB,4BAA6B,MAAgB,OAAO,EAAE;AAAA,MACzF;AAAA,IACJ;AAEA,UAAM,QAAQ,oBAAoB,aAAW;AACzC,cAAQ,QAAQ,SAAS;AAAA,QACrB,KAAK;AACD,2BAAiB,kBAAkB,QAAQ,IAAI;AAC/C,sBAAY;AACZ;AAAA,QACJ,KAAK;AACD,2BAAiB,kBAAkB,QAAQ,IAAI;AAC/C;AAAA,MACR;AAAA,IACJ,GAAG,QAAW,QAAQ,aAAa;AAAA,EACvC,CAAC;AAED,UAAQ,cAAc,KAAK,UAAU;AACzC;AAEA,SAAS,kBAAkB,MAAsB;AAC7C,QAAM,QAAQ,KAAK,MAAM,IAAI,EAAE,IAAI,UAAQ;AACvC,WAAO,qBAAqB,IAAI;AAAA,EACpC,CAAC,EAAE,KAAK,EAAE;AACV,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qEAoC0D,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiC1E;AAEA,SAAS,kBAAkB,MAAsB;AAC7C,SAAO,KACF,QAAQ,mCAAmC,MAAM,EACjD,QAAQ,eAAe,EAAE,EACzB,QAAQ,WAAW,GAAG,EACtB,QAAQ,UAAU,GAAG,EACrB,QAAQ,SAAS,GAAG,EACpB,QAAQ,SAAS,GAAG,EACpB,QAAQ,OAAO,EAAE;AAC1B;",
  "names": []
}
